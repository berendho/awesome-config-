-- default rc.lua for shifty
--
-- Standard awesome library
require("awful")
require("awful.autofocus")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- shifty - dynamic tagging library
require("shifty")
-- calendar
require("calendar2")
-- vicious for widgets
vicious = require("vicious")

-- useful for debugging, marks the beginning of rc.lua exec
print("Entered rc.lua: " .. os.time())

-- Variable definitions
-- Themes define colours, icons, and wallpapers
-- The default is a dark theme
theme_path = "/usr/share/awesome/themes/berend/theme.lua"
-- theme_pach = "/usr/share/awesome/themes/default/theme.lua"
-- Uncommment this for a lighter theme
-- theme_path = "/usr/share/awesome/themes/sky/theme"

    -- Actually load theme
beautiful.init(theme_path)

    -- This is used later as the default terminal and editor to run.
    browser = "Chromium-browser"
    mail = "thunderbird"
    terminal = "x-terminal-emulator"
    application_launcher = "synapse"
    htop = terminal ..  " -e htop"
    editor = os.getenv("EDITOR") or "subl"
    editor_cmd = terminal .. " -e " .. editor

    -- Default modkey.
    -- Usually, Mod4 is the key with a logo between Control and Alt.
    -- If you do not like this or do not have such a key, I suggest you to remap
    -- Mod4 to another key using xmodmap or other tools.  However, you can use
    -- another modifier like Mod1, but it may interact with others.
    modkey = "Mod4"

    -- Table of layouts to cover with awful.layout.inc, order matters.
    layouts =
{
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,
    awful.layout.suit.floating
}

-- Define if we want to use titlebar on all applications.
use_titlebar = false

-- Shifty configured tags.
shifty.config.tags = {
    term = {
        layout    = awful.layout.suit.tile,
        mwfact    = 0.60,
        exclusive = false,
        position  = 1,
        init      = true,
        screen    = 1,
        slave     = true,
    },
    web = {
        layout      = awful.layout.suit.tile,
        init        = true,
        nopopup = true,
        mwfact      = 0.65,
        position    = 2,
        -- spawn       = browser,
    },
    files = {
        layout    = awful.layout.suit.max,
        init    = true,
        nopopup = true,
        mwfact    = 1,
        exclusive = false,
        position  = 5,
        -- spawn     = mail,
    },
    chat = {
        layout = awful.layout.suit.tile.left,
        init = true,
        mwfact = 1,
        nopopup = true,
        exclusive = true,
        position = 9,
    },
    eclipse = {
        layout = awful.layout.suit.max,
        exclusive = true,
        init = false,
        position = 6,
    },
    media = {
        layout    = awful.layout.suit.float,
        exclusive = false,
        position  = 8,
    },
    office = {
        layout   = awful.layout.suit.tile,
        position = 7,
    },
}

-- SHIFTY: application matching rules
-- order here matters, early rules will be applied first
shifty.config.apps = {
    {
        match = {
            "Google Chrome",
            "chrome",
            "google-chrome",
            "Mozilla Firefox",
            "firefox",
            "Chromium-browser",
            "chromium-browser",
        },
        nofocus = false,
    },
    {
        match = { 
             "hangouts",
             "Hangouts",
        },
        tag = "chat",
    },
    {
        match = {
            "eclipse",
            "Eclipse",
        },
        tag = "eclipse"
    },
    {
        match = {
            "Thunderbird",
        },
        tag = "mail",
        nofocus = true,
    },
    {
        match = {
            "gnome-do",
            "synapse",
        },
        intrusive = true,
        float = true,
    },
    {
        match = {
            "pcmanfm",
        },
        slave = true
    },
    {
        match = {
            "OpenOffice.*",
        },
        tag = "office",
    },
    {
        match = {
            "vlc",
            "spotify",
        },
        tag = "media",
        nopopup = true,
    },
    {
        match = {
            "MPlayer",
            "Gnuplot",
            "galculator",
        },
        float = true,
    },
    {
        match = {
            terminal,
        },
        honorsizehints = false,
        slave = true,
    },
    --{
        --match = {""},
        --buttons = awful.util.table.join(
                --awful.button({}, 1, function (c) client.focus = c; c:raise() end),
                --awful.button({modkey}, 1, function(c)
                    --client.focus = c
                    --c:raise()
                    --awful.mouse.client.move(c)
                    --end),
                -- awful.button({modkey}, 3, awful.mouse.client.resize)
                --)
            --},
}

-- SHIFTY: default tag creation rules
-- parameter description
--  * floatBars : if floating clients should always have a titlebar
--  * guess_name : should shifty try and guess tag names when creating
--                 new (unconfigured) tags?
--  * guess_position: as above, but for position parameter
--  * run : function to exec when shifty creates a new tag
--  * all other parameters (e.g. layout, mwfact) follow awesome's tag API
shifty.config.defaults = {
    layout = awful.layout.suit.tile.left,
    ncol = 1,
    mwfact = 0.60,
    floatBars = true,
    guess_name = true,
    guess_position = true,
}

--  Wibox

-- seperator
seperator = widget({type = "textbox"})
seperator.text = " <span color='#767b8a'>::</span> "

-- tag seperator
tagseperator = widget({type = "textbox"})
tagseperator.text = " <span color='#767b8a'>|</span> "

-- memory
memorywidget = widget({type = "textbox"})
memorywidget.width = 52
vicious.register(memorywidget, vicious.widgets.mem, "<span color='#3ab3ff'>mem</span> $1%",5)

-- cpu
cpuwidget = widget({type = "textbox"})
cpuwidget.width = 52
vicious.register(cpuwidget, vicious.widgets.cpu, "<span color='#3ab3ff'>cpu</span> $1%",2)

-- network
netwidget = widget({type = "textbox"})
netwidget.width = 50
vicious.register(netwidget, vicious.widgets.net, "<span color='#3ab3ff'>↓ </span>${wlan0 down_kb}")
netwidgetup = widget({type = "textbox"})
netwidgetup.width = 50
vicious.register(netwidgetup, vicious.widgets.net, "<span color='#3ab3ff'>↑ </span>${wlan0 up_kb}")

-- batterij
batt = widget({type = "textbox"})
batt.text = "test"
vicious.register(batt, (function() 
    local handle = io.popen("acpi -b | sed -n 's/.*\\([0-9 ][0-9][0-9]%\\).*/\\1/p' | tr -d ' '")
    local result = handle:read("*all")
    handle:close()
    return ("<span color='#8ab3ff'>batt </span>" .. result )  end),
"$1", 5)

-- spotify
spotnext = widget({type = "textbox"})
spotnext.text = " next "
-- spotnext:buttons(awful.util.table.join(
    -- awful.buttons({}, 1, (function() awful.util.spawn("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify \/org\/mpris\/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next") end))
-- ))
spotprev = widget({type = "textbox"})
spotprev.text = " prev "
-- spotnext:buttons(awful.util.table.join(
    -- awful.buttons({}, 1, (function() awful.util.spawn("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Prev") end))
-- ))

-- geluid
sound = widget({type = "textbox"})
sound.text = "test"
vicious.register(sound, (function() 
    local handle = io.popen("amixer get Master | sed -n 's/[^\\[]*\\[\\([^%]*%\\).*/\\1/p' | tr -d ' '")
    local result = handle:read("*all")
    handle:close()
    return  "<span color='#8ab3ff'>vol </span>" .. result end),
"$1 ", 100)
sound:buttons(awful.util.table.join(
    awful.button({}, 4, (function() awful.util.spawn("amixer set Master 2+") vicious.force({sound}) end)),
    awful.button({}, 5, (function() awful.util.spawn("amixer set Master 2-") vicious.force({sound}) end)),
    awful.button({}, 1, (function() awful.util.spawn("amixer set Master 0") vicious.force({sound}) end))
))

soundup = widget({type = "textbox"})
soundup.text = "<span color='#8ab3ff'>+</span>"
soundup:buttons(awful.util.table.join(
    awful.button({}, 1, (function() awful.util.spawn("amixer set Master 2+") vicious.force({sound}) end))
))
sounddown = widget({type = "textbox"})
sounddown.text = "<span color='#8ab3ff'>--</span>"
sounddown:buttons(awful.util.table.join(
    awful.button({}, 1, (function() awful.util.spawn("amixer set Master 2-") vicious.force({sound}) end))
))

-- reboot
rebootmenu = awful.menu({ items = {
    {"reboot", terminal .. " -e gksu reboot"},
    {"shutdown", terminal .. " -e gksu poweroff"},
    {"logout", awesome.quit},
    {"lock", (function() awful.util.spawn(terminal .. " -e xscreensaver-command -lock ") end)}}})
rebootbutton = widget({type = 'imagebox'})
rebootbutton.image = image("/home/berend/.config/awesome/power.jpg")
rebootbutton:buttons(awful.util.table.join(
   awful.button({}, 1, (function() 
                if rebootinstance then
                    rebootinstance:hide()
                    rebootinstance = nil
                else
                    rebootinstance = rebootmenu
                    rebootinstance:show({width=800}, {keygrabber=true, coords={x=-1,y=-1}})
                end
      end
      ))
))
-- datum
customclock = widget({type = "textbox"})
customclock.text = "datum"
vicious.register(customclock, (function() return "<span color='#8ab3ff'>time</span> " .. os.date("%X") .. " " end), "$1", 1)
calendar2.addCalendarToWidget(customclock)

-- Create a textbox widget
mytextclock = awful.widget.textclock({align = "right"})

-- Create a laucher widget and a main menu
myawesomemenu = {
    {"manual", terminal .. " -e man awesome"},
    {"edit config",
        editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua"},
    {"restart", awesome.restart},
    {"quit", awesome.quit}
}

mymainmenu = awful.menu(
        {
        items = {
        {"awesome", myawesomemenu, beautiful.awesome_icon},
        {"open terminal", terminal}}
        })

mylauncher = awful.widget.launcher({image = image(beautiful.awesome_icon),
        menu = mymainmenu})

    -- gmail widget and tooltip
    mygmail = widget({ type = "textbox" })
    gmail_t = awful.tooltip({ objects = { mygmail },})

    mygmail:buttons(awful.util.table.join(
        awful.button({}, 1, (function() awful.util.spawn("google-chrome -app=http://gmail.com") end))
        ))

vicious.register(mygmail, vicious.widgets.gmail,
        function (widget, args)
        gmail_t:set_text(args["{subject}"])
        gmail_t:add_to_object(mygmailimg)
        return "<span color='#8ab3ff'> mails </span>" .. args["{count}"]
        end, 30) 
    --the '120' here means check every 2 minutes.

    -- Create a systray
    mysystray = widget({type = "systray", align = "right"})


    -- Create a wibox for each screen and add it
    mywibox = {}
    bottombox = {}
    mypromptbox = {}
    mylayoutbox = {}
    mytaglist = {}
    mytaglist.buttons = awful.util.table.join(
            awful.button({}, 1, awful.tag.viewonly),
            awful.button({}, 4, awful.tag.viewnext),
            awful.button({}, 5, awful.tag.viewprev)
            )

    mytasklist = {}
    mytasklist.buttons = awful.util.table.join(
            awful.button({}, 1, function(c)
                if not c:isvisible() then
                awful.tag.viewonly(c:tags()[1])
                end
                client.focus = c
                c:raise()
                end),
            awful.button({}, 3, function()
                if instance then
                instance:hide()
                instance = nil
                else
                instance = awful.menu.clients({width=250}, {keygrabber = true})
                end
                end),
            awful.button({}, 4, function()
                awful.client.focus.byidx(1)
                if client.focus then client.focus:raise() end
                end),
            awful.button({}, 5, function()
                awful.client.focus.byidx(-1)
                if client.focus then client.focus:raise() end
                end))

                for s = 1, screen.count() do
                -- Create a promptbox for each screen
    mypromptbox[s] =
awful.widget.prompt({layout = awful.widget.layout.leftright})
    -- Create an imagebox widget which will contains an icon indicating which
    -- layout we're using.  We need one layoutbox per screen.
mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                awful.button({}, 1, function() awful.layout.inc(layouts, 1) end),
                awful.button({}, 3, function() awful.layout.inc(layouts, -1) end),
                awful.button({}, 4, function() awful.layout.inc(layouts, 1) end),
                awful.button({}, 5, function() awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
mytaglist[s] = awful.widget.taglist.new(s,
        awful.widget.taglist.label.all,
        mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist.new(function(c)
            return awful.widget.tasklist.label.currenttags(c, s)
            end,
            mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({position = "top", screen = s})
    bottombox[s] = awful.wibox({position = "bottom", screen = s})
    -- Add widgets to the wibox - order matters
    bottombox[s].widgets = {
        {
        mylayoutbox[s],
        seperator,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.leftright
        },
        layout = awful.widget.layout.horizontal.rightleft,

    }
    mywibox[s].widgets = {
        {
            -- mylauncher,
            mytaglist[s],
            seperator,
            mypromptbox[s],
            -- layout = awful.widget.layout.horizontal.leftright
        },
        -- mylayoutbox[s],
        -- mytextclock,
        rebootbutton,
        customclock,
        seperator,
        batt,
        seperator,
        sound,
        seperator,
        memorywidget,
        seperator,
        cpuwidget,
        seperator,
        netwidgetup,
        netwidget,
        seperator,
        mygmail,
        -- seperator,
        -- spotnext,
        -- spotprev,
        -- s == 1 and mysystray or nil,
        -- mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }

mywibox[s].screen = s
bottombox[s].screen = s
end

-- SHIFTY: initialize shifty
    -- the assignment of shifty.taglist must always be after its actually
-- initialized with awful.widget.taglist.new()
    shifty.taglist = mytaglist
shifty.init()

    -- Mouse bindings
    root.buttons(awful.util.table.join(
                awful.button({}, 3, function() mymainmenu:show({keygrabber=true}) end),
                awful.button({}, 4, awful.tag.viewnext),
                awful.button({}, 5, awful.tag.viewprev)
                ))

    -- Key bindings
    globalkeys = awful.util.table.join(
            -- new background
            awful.key({modkey, "Shift",},"e", function() awful.util.spawn_with_shell("awsetbg -r /home/berend/Downloads/wallpapers/") end),
            -- restart awesome
            awful.key({modkey, "Shift", "Control",}, "r", awesome.restart),
            -- Tags
            awful.key({modkey,}, "Left", awful.tag.viewprev),
            awful.key({modkey,}, "Right", awful.tag.viewnext),
            awful.key({modkey,}, "Escape", awful.tag.history.restore),

            -- Shifty: keybindings specific to shifty
            awful.key({modkey, "Shift"}, "d", shifty.del), -- delete a tag
            awful.key({modkey, "Shift"}, "n", shifty.send_prev), -- client to prev tag
            awful.key({modkey}, "n", shifty.send_next), -- client to next tag
            awful.key({modkey, "Control"},
                "n",
                function()
                local t = awful.tag.selected()
                local s = awful.util.cycle(screen.count(), t.screen + 1)
                awful.tag.history.restore()
                t = shifty.tagtoscr(s, t)
                awful.tag.viewonly(t)
                end),
            awful.key({modkey}, "a", shifty.add), -- creat a new tag
            -- restore run key
    -- awful.key({modkey}, "r", function () mypromptbox[mouse.screen]:run() end),
    awful.key({modkey}, "r", function() awful.util.spawn(application_launcher) end), 
            awful.key({modkey}, "o", function()
                if instance then
                instance:hide()
                instance = nil
                else
                instance = awful.menu.clients({width=250}, {keygrabber = true})
                instance:show({keygrabber=true})
                end
                end),
    awful.key({modkey, "Shift"}, "a", -- nopopup new tag
            function()
            shifty.add({nopopup = true})
            end),

    awful.key({modkey,}, "j",
            function()
            awful.client.focus.byidx(1)
            if client.focus then client.focus:raise() end
            end),
    awful.key({modkey,}, "k",
            function()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
            end),
    awful.key({modkey,}, "w", function() mymainmenu:show(true) end),

    -- Layout manipulation
    awful.key({modkey, "Shift"}, "j",
            function() awful.client.swap.byidx(1) end),
    awful.key({modkey, "Shift"}, "k",
            function() awful.client.swap.byidx(-1) end),
    awful.key({modkey, "Control"}, "j", function() awful.screen.focus(1) end),
    awful.key({modkey, "Control"}, "k", function() awful.screen.focus(-1) end),
    awful.key({modkey,}, "u", awful.client.urgent.jumpto),
    awful.key({modkey,}, "Tab",
            function()
            awful.client.focus.history.previous()
            if client.focus then
            client.focus:raise()
            end
            end),
    -- volume jeej --
    awful.key({modkey, "Shift"}, "Up", function() awful.util.spawn("amixer set Master 2+") vicious.force({sound}) end),
    awful.key({modkey, "Shift"}, "Down", function() awful.util.spawn("amixer set Master 2-") vicious.force({sound}) end),
    -- lock screen --
    awful.key({modkey, "Control",}, "l", function() awful.util.spawn("xscreensaver-command -lock") end),

    -- Standard program
    awful.key({modkey,}, "Return", function() awful.util.spawn(terminal) end),
    awful.key({modkey, "Control"}, "r", awesome.restart),
    awful.key({modkey, "Shift"}, "q", awesome.quit),

    awful.key({modkey,}, "l", function() awful.tag.incmwfact(0.05) end),
    awful.key({modkey,}, "h", function() awful.tag.incmwfact(-0.05) end),
    awful.key({modkey, "Shift"}, "h", function() awful.tag.incnmaster(1) end),
    awful.key({modkey, "Shift"}, "l", function() awful.tag.incnmaster(-1) end),
    awful.key({modkey, "Control"}, "h", function() awful.tag.incncol(1) end),
    awful.key({modkey, "Control"}, "l", function() awful.tag.incncol(-1) end),
    awful.key({modkey,}, "space", function() awful.layout.inc(layouts, 1) end),
    awful.key({modkey, "Shift"}, "space",
            function() awful.layout.inc(layouts, -1) end),

    -- Prompt
    awful.key({modkey}, "F1", function()
            awful.prompt.run({prompt = "Run: "},
                mypromptbox[mouse.screen].widget,
                awful.util.spawn, awful.completion.shell,
                awful.util.getdir("cache") .. "/history")
            end),

    awful.key({modkey}, "F4", function()
            awful.prompt.run({prompt = "Run Lua code: "},
                mypromptbox[mouse.screen].widget,
                awful.util.eval, nil,
                awful.util.getdir("cache") .. "/history_eval")
            end)
    )

    -- Client awful tagging: this is useful to tag some clients and then do stuff
    -- like move to tag on them
    clientkeys = awful.util.table.join(
            awful.key({modkey,}, "f", function(c) c.fullscreen = not c.fullscreen  end),
            awful.key({modkey, "Shift"}, "c", function(c) c:kill() end),
            awful.key({modkey, "Control"}, "space", awful.client.floating.toggle),
            awful.key({modkey, "Control"}, "Return",
                function(c) c:swap(awful.client.getmaster()) end),
            awful.key({modkey,}, "o", awful.client.movetoscreen),
            awful.key({modkey, "Shift"}, "r", function(c) c:redraw() end),
            awful.key({modkey}, "t", awful.client.togglemarked),
            awful.key({modkey,}, "m",
                function(c)
                c.maximized_horizontal = not c.maximized_horizontal
                c.maximized_vertical   = not c.maximized_vertical
                end)
            )

    -- SHIFTY: assign client keys to shifty for use in
-- match() function(manage hook)
    shifty.config.clientkeys = clientkeys
    shifty.config.modkey = modkey

    -- Compute the maximum number of digit we need, limited to 9
    for i = 1, (shifty.config.maxtags or 9) do
globalkeys = awful.util.table.join(globalkeys,
        awful.key({modkey}, i, function()
            local t =  awful.tag.viewonly(shifty.getpos(i))
            end),
        awful.key({modkey, "Control"}, i, function()
            local t = shifty.getpos(i)
            t.selected = not t.selected
            end),
        awful.key({modkey, "Control", "Shift"}, i, function()
            if client.focus then
            awful.client.toggletag(shifty.getpos(i))
            end
            end),
        -- move clients to other tags
        awful.key({modkey, "Shift"}, i, function()
            if client.focus then
            t = shifty.getpos(i)
            awful.client.movetotag(t)
            awful.tag.viewonly(t)
            end
            end))
    end

    -- Set keys
root.keys(globalkeys)

    -- Hook function to execute when focusing a client.
    client.add_signal("focus", function(c)
            if not awful.client.ismarked(c) then
            c.border_color = beautiful.border_focus
            end
            end)

    -- Hook function to execute when unfocusing a client.
    client.add_signal("unfocus", function(c)
            if not awful.client.ismarked(c) then
            c.border_color = beautiful.border_normal
            end
            end)


function run_once(cmd)
    findme = cmd
    firstspace = cmd:find(" ")
    if firstspace then
findme = cmd:sub(0, firstspace-1)
    end
    awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
    end

run_once("xscreensaver -no-splash")
awful.util.spawn_with_shell("unset GTK_MODULES")


